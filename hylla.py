import os
import shutil
import datetime
import sqlite3
import click

# class used when displaying projects (might be a bit unecessary)
class Project:
    def __init__(self, name, path, tags, code, date, id):
        self.name = name
        self.dir = path
        self.tags = tags.split(', ')
        self.tags_str = tags
        self.code = code
        self.date = date
        self.id = id
    def __repr__(self):
        return self.name

# an object used to send config data to every command
class Config(object):
     def __init__(self):
         self.location = False
         self.conn = False
         self.c = False
pass_config = click.make_pass_decorator(Config, ensure=True)


# Creating a click group
@click.group()
@click.option('--location',
              envvar='HYLLA_LOCATION',
              prompt='Specify a location to store your projects (or set HYLLA_LOCATION)',
              type=click.Path(exists=True, file_okay=False))
@pass_config
def cli(config, location):
    """Hylla. Organize all your projects from the command-line"""
    config.location = location
    # Database connection and vars
    conn = sqlite3.connect(os.path.join(location, 'hylla_datebase.db'))
    c = conn.cursor()
    # add to config object
    config.conn = conn
    config.c = c

    # Create the table, if it does not exist already.
    with conn:
        c.execute("""CREATE TABLE IF NOT EXISTS projects (
                            name text,
                            path text,
                            tags text,
                            code text,
                            date text,
                            id integer primary key
        )""")

# 'Docs' command, used to open the docs/github in a browser window
@cli.command('docs')
def open_docs():
    """Open the documentation in your browser"""
    click.echo('https://www.github.com/adelhult/hylla')
    click.launch("https://www.github.com/adelhult/hylla")


# 'New' command:
@cli.command('new')
@click.argument('name')
@click.argument('tags', nargs=-1)
@click.option('--readme-template',
             envvar='HYLLA_README_TEMPLATE',
             type=click.Path(exists=True, dir_okay=False))
@pass_config
def new(config, name, tags, readme_template):
    """Create a new project"""
    # define vars project_name and project_dir
    project_name, project_dir = parse_project_data(name, config)

    # check if the project exists already and if that is the case exit.
    if project_exists(project_name, project_dir, config):
        click.secho('Error! Project name is already used', bg='red', fg='white')
        exit()

    # Add to database
    add_to_database(project_name, project_dir, tags, config)

    # print info
    click.echo(f'Project name: {project_name}')
    click.echo(f'Tags: {tags}')

    #Create folder
    os.mkdir(project_dir)
    click.echo('Project directory created!')
    # Create a readme file in the directory
    create_readme(readme_template, project_dir, project_name)

# 'List' command:
@cli.command('list')
@pass_config
def list(config):
    """List your projects"""
    for project in fetch_all_projects(config):
        print(project.name, project.tags_str)

# Function used to create the readme file
def create_readme(template_path, project_dir, project_name):
    file_path = os.path.join(project_dir, 'README.md')
    if not os.path.isfile(file_path):
        if template_path:
            # Makes a copy of the template file
            shutil.copyfile(template_path, file_path)
            click.echo('Created a README file based on the provided template')
        else:
            # No template file was provided, use the standard
            with open(file_path, 'w') as f:
                f.write(f'# {project_name}\n\n## TODO\n\n## Hylla\nThis file was generated by [Hylla](https://github.com/adelhult/hylla). If you wish to use a template of your own. Specifiy the environmental varible HYLLA_README_TEMPLATE.')
            click.echo('Created a standard README file')
    else:
        click.echo('A README does already exist in the folder')

def parse_project_data(name, config):
    project_name = name.strip().lower().replace(' ', '_')
    project_dir = os.path.join(config.location, project_name)
    return project_name, project_dir

# Determines if a project dir exits or if it is used in the database
def project_exists(name, dir, config):
    config.c.execute("SELECT * FROM projects WHERE name=:name", {'name':name})
    if os.path.exists(dir) or config.c.fetchone():
        return True
    return False

# Adds the project to the database
def add_to_database(name, dir, tags, config):
    code = ''
    date = datetime.datetime.now()
    tags_string = ', '.join(str(e) for e in tags)
    with config.conn:
        config.c.execute("INSERT INTO projects VALUES (?, ?, ?, ?, ?, NULL)",
            (name, dir, tags_string, code, date))

def fetch_all_projects(config):
    projects = []
    config.c.execute("SELECT * FROM projects")
    for p in config.c.fetchall():
        projects.append(Project(p[0],
                                p[1],
                                p[2],
                                p[3],
                                p[4],
                                p[5]))
    return projects


if __name__ == '__main__':
    cli()
